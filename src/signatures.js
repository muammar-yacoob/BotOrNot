// AI Generation Signatures Database
// Contains known signatures, magic bytes, and metadata patterns for AI-generated content

class SignatureDatabase {
  constructor() {
    // Known AI tool signatures in file headers and metadata
    this.aiSignatures = {
      // DALL-E signatures
      'dall-e': {
        metadata: ['DALL·E', 'DALL-E', 'OpenAI', 'dalle', 'openai-generated'],
        exif: ['Software: DALL-E', 'Creator: OpenAI', 'ImageDescription: Generated by DALL-E'],
        comment: ['dall-e', 'openai', 'generated by dall-e'],
        userComment: ['DALL·E', 'OpenAI DALL-E']
      },

      // Midjourney signatures (Enhanced based on research)
      'midjourney': {
        metadata: ['Midjourney', 'MJ', 'midjourney', 'discord.gg/midjourney', 'midjourney bot', 'mj bot'],
        exif: ['Software: Midjourney', 'Creator: Midjourney', 'Artist: Midjourney', 'Generator: Midjourney'],
        comment: ['midjourney', 'mj', '--ar', '--v ', '--stylize', '--seed', '--chaos', '--quality', '--stop', '--weird', '--tile', '--video', '--aspect', '--beta', '--test', '--testp', '--creative', '--upbeta', '--style'],
        userComment: ['Midjourney', 'Generated by Midjourney', 'Created with Midjourney'],
        // Comprehensive Midjourney parameter patterns (based on C2PA research)
        parameters: [
          // Aspect ratio parameters
          '--ar', '--aspect',
          // Version parameters
          '--v 1', '--v 2', '--v 3', '--v 4', '--v 5', '--v 5.1', '--v 5.2', '--version',
          // Quality and style parameters
          '--q 0.25', '--q 0.5', '--q 1', '--q 2', '--quality',
          '--stylize', '--s ', '--style raw', '--style expressive', '--style cute',
          // Generation parameters
          '--seed', '--chaos', '--c ', '--weird', '--w ', '--stop',
          // Tile and video
          '--tile', '--video', '--no', '--iw', '--image-weight',
          // Beta and test versions
          '--beta', '--test', '--testp', '--creative', '--upbeta', '--hd', '--fast',
          // Lighting and camera parameters often used
          'cinematic lighting', 'volumetric lighting', 'soft lighting',
          'shot on 35mm', 'shot on film', 'depth of field',
          // Common Midjourney style modifiers
          'hyperrealistic', 'photorealistic', 'unreal engine', 'octane render',
          'trending on artstation', 'concept art', 'digital art'
        ],
        // URL patterns specific to Midjourney
        urlPatterns: [
          /cdn\.midjourney\.com/i,
          /media\.discordapp\.net.*midjourney/i,
          /discord\.com.*midjourney/i
        ],
        // Filename patterns common in Midjourney outputs
        filenamePatterns: [
          /\d+_\d+_\d+_\d+\.png/i, // Discord attachment pattern
          /midjourney.*\d+/i,
          /mj_.*\d+/i
        ]
      },

      // Stable Diffusion signatures
      'stable-diffusion': {
        metadata: ['Stable Diffusion', 'SD', 'stability.ai', 'CompVis', 'RunwayML'],
        exif: ['Software: Stable Diffusion', 'Creator: Stability AI'],
        comment: ['stable diffusion', 'steps:', 'cfg scale:', 'sampler:', 'seed:'],
        userComment: ['Stable Diffusion', 'Generated by Stable Diffusion'],
        parameters: ['Steps:', 'Sampler:', 'CFG scale:', 'Seed:', 'Model hash:']
      },

      // Adobe Firefly signatures
      'firefly': {
        metadata: ['Adobe Firefly', 'Firefly', 'adobe firefly', 'adobe.com/firefly'],
        exif: ['Software: Adobe Firefly', 'Creator: Adobe', 'Artist: Adobe Firefly'],
        comment: ['adobe firefly', 'firefly generated', 'adobe generative ai'],
        userComment: ['Adobe Firefly', 'Generated by Adobe Firefly']
      },

      // Google Imagen signatures
      'imagen': {
        metadata: ['Imagen', 'Google Imagen', 'imagen.research.google'],
        exif: ['Software: Google Imagen', 'Creator: Google', 'Artist: Google Imagen'],
        comment: ['google imagen', 'imagen model', 'google ai'],
        userComment: ['Google Imagen', 'Generated by Google Imagen']
      },

      // RunwayML signatures
      'runway': {
        metadata: ['Runway', 'RunwayML', 'runway.ml', 'runwayml.com'],
        exif: ['Software: RunwayML', 'Creator: RunwayML', 'Artist: RunwayML'],
        comment: ['runway', 'runwayml', 'runway generated'],
        userComment: ['RunwayML', 'Generated by RunwayML']
      },

      // Leonardo AI signatures
      'leonardo': {
        metadata: ['Leonardo', 'Leonardo.ai', 'leonardo.ai'],
        exif: ['Software: Leonardo AI', 'Creator: Leonardo.ai'],
        comment: ['leonardo', 'leonardo.ai', 'leonardo generated'],
        userComment: ['Leonardo AI', 'Generated by Leonardo']
      },

      // Nano-Banana (Google's AI image generator) signatures
      'nano-banana': {
        metadata: ['nano-banana', 'Nano Banana', 'Google AI', 'google-ai', 'nano banana', 'nano_banana', 'nano-banana-2025'],
        exif: ['Software: nano-banana', 'Creator: Google', 'Artist: Google AI', 'Generator: nano-banana', 'Software: Nano Banana', 'Software: nano-banana-2025'],
        comment: ['nano-banana', 'google ai', 'google generated', 'nano banana', 'generated by nano-banana', 'nano-banana-2025'],
        userComment: ['nano-banana', 'Generated by nano-banana', 'Created with Google AI', 'Nano Banana AI', 'nano-banana-2025'],
        url: ['nano-banana', 'nano_banana'],
        filename: ['nano-banana', 'nano_banana', 'nano-banana-2025']
      },

      // Ideogram AI signatures
      'ideogram': {
        metadata: ['Ideogram', 'Ideogram AI', 'ideogram.ai'],
        exif: ['Software: Ideogram AI', 'Creator: Ideogram', 'Artist: Ideogram AI'],
        comment: ['ideogram', 'ideogram ai'],
        userComment: ['Ideogram AI', 'Generated by Ideogram', 'Created with Ideogram']
      },

      // Artbreeder signatures
      'artbreeder': {
        metadata: ['Artbreeder', 'artbreeder.com'],
        exif: ['Software: Artbreeder', 'Creator: Artbreeder'],
        comment: ['artbreeder', 'bred on artbreeder'],
        userComment: ['Artbreeder', 'Generated by Artbreeder']
      },

      // DeepAI signatures
      'deepai': {
        metadata: ['DeepAI', 'deepai.org'],
        exif: ['Software: DeepAI', 'Creator: DeepAI'],
        comment: ['deepai', 'deep ai generated'],
        userComment: ['DeepAI', 'Generated by DeepAI']
      },

      // Bing Image Creator / DALL-E 3
      'bing-creator': {
        metadata: ['Bing Image Creator', 'Microsoft Bing', 'DALL-E 3', 'bing.com/create'],
        exif: ['Software: Bing Image Creator', 'Creator: Microsoft Bing'],
        comment: ['bing image creator', 'bing create', 'microsoft bing'],
        userComment: ['Bing Image Creator', 'Microsoft Bing AI']
      },

      // NovelAI
      'novelai': {
        metadata: ['NovelAI', 'novelai.net'],
        exif: ['Software: NovelAI', 'Creator: NovelAI'],
        comment: ['novelai', 'novel ai', 'nai generated'],
        userComment: ['NovelAI', 'Generated by NovelAI']
      },

      // Waifu2x and similar upscalers
      'ai-upscaler': {
        metadata: ['waifu2x', 'Real-ESRGAN', 'ESRGAN', 'AI Upscaler'],
        exif: ['Software: waifu2x', 'Software: Real-ESRGAN'],
        comment: ['waifu2x', 'esrgan', 'ai upscaled', 'super resolution'],
        userComment: ['AI Upscaled', 'Enhanced by AI']
      },

      // ChatGPT DALL-E
      'chatgpt-dalle': {
        metadata: ['ChatGPT', 'GPT-4', 'chat.openai.com'],
        exif: ['Software: ChatGPT', 'Creator: OpenAI ChatGPT'],
        comment: ['chatgpt', 'gpt-4', 'openai chat'],
        userComment: ['Generated by ChatGPT', 'OpenAI GPT']
      },

      // Canva AI
      'canva-ai': {
        metadata: ['Canva', 'canva.com', 'Canva AI'],
        exif: ['Software: Canva', 'Creator: Canva'],
        comment: ['canva', 'canva ai', 'canva generated'],
        userComment: ['Canva AI', 'Generated by Canva']
      },

      // Adobe Stock AI-generated images
      'adobe-stock-ai': {
        metadata: ['Adobe Stock', 'Generated by Adobe Firefly', 'Adobe Firefly AI'],
        exif: ['Software: Adobe Stock', 'Creator: Adobe Stock', 'Artist: Adobe Stock AI', 'Generator: Adobe Firefly'],
        comment: ['adobe stock', 'generated by adobe firefly', 'adobe ai'],
        userComment: ['Adobe Stock AI', 'Generated by Adobe Firefly for Stock'],
        // XMP metadata patterns
        xmp: ['adobe:docid', 'xmp:CreatorTool.*Adobe.*Firefly', 'dc:creator.*Adobe.*Firefly']
      },

      // Stock photo services with AI
      'stock-ai': {
        metadata: ['iStock AI', 'Getty Images AI', 'Shutterstock AI', 'Generated Stock Image'],
        exif: ['Software: iStock AI', 'Creator: Getty Images AI', 'Artist: Shutterstock AI'],
        comment: ['istock ai', 'getty ai', 'shutterstock ai', 'stock ai generated'],
        userComment: ['Stock AI', 'AI-Generated Stock Photo']
      },

      // Photoshop AI (Generative Fill)
      'photoshop-ai': {
        metadata: ['Adobe Photoshop', 'Generative Fill', 'Adobe Sensei'],
        exif: ['Software: Adobe Photoshop', 'Creator: Adobe'],
        comment: ['generative fill', 'adobe sensei', 'photoshop ai'],
        userComment: ['Adobe AI', 'Photoshop Generative']
      },

      // Playground AI
      'playground-ai': {
        metadata: ['Playground AI', 'playgroundai.com'],
        exif: ['Software: Playground AI', 'Creator: Playground AI'],
        comment: ['playground ai', 'playground generated'],
        userComment: ['Playground AI', 'Generated by Playground']
      },

      // Jasper Art
      'jasper-art': {
        metadata: ['Jasper Art', 'jasper.ai'],
        exif: ['Software: Jasper Art', 'Creator: Jasper'],
        comment: ['jasper art', 'jasper ai'],
        userComment: ['Jasper Art', 'Generated by Jasper']
      },

      // NightCafe
      'nightcafe': {
        metadata: ['NightCafe', 'nightcafe.studio'],
        exif: ['Software: NightCafe', 'Creator: NightCafe'],
        comment: ['nightcafe', 'night cafe'],
        userComment: ['NightCafe', 'Generated by NightCafe']
      },

      // Craiyon (formerly DALL-E mini)
      'craiyon': {
        metadata: ['Craiyon', 'DALL-E mini', 'craiyon.com'],
        exif: ['Software: Craiyon', 'Creator: Craiyon'],
        comment: ['craiyon', 'dall-e mini', 'dalle mini'],
        userComment: ['Craiyon', 'DALL-E mini']
      },

      // ComfyUI
      'comfyui': {
        metadata: ['ComfyUI', 'comfyui', 'comfy-ui'],
        exif: ['Software: ComfyUI', 'Creator: ComfyUI'],
        comment: ['comfyui', 'comfy ui', 'workflow', 'nodes'],
        userComment: ['ComfyUI', 'Generated by ComfyUI']
      },

      // Automatic1111 (AUTOMATIC1111)
      'automatic1111': {
        metadata: ['AUTOMATIC1111', 'stable-diffusion-webui'],
        exif: ['Software: AUTOMATIC1111', 'Creator: AUTOMATIC1111'],
        comment: ['automatic1111', 'stable-diffusion-webui', 'webui'],
        userComment: ['AUTOMATIC1111', 'SD WebUI']
      },

      // InvokeAI
      'invokeai': {
        metadata: ['InvokeAI', 'invoke-ai', 'invokeai.ai'],
        exif: ['Software: InvokeAI', 'Creator: InvokeAI'],
        comment: ['invokeai', 'invoke ai', 'invoke-ai'],
        userComment: ['InvokeAI', 'Generated by InvokeAI']
      },

      // Generic AI signatures (more comprehensive)
      'generic-ai': {
        metadata: ['AI Generated', 'Artificial Intelligence', 'Machine Learning', 'Neural Network', 'Generative AI', 'Text-to-Image', 'Synthetic Media', 'AI-Generated Content'],
        exif: ['AI-Generated: true', 'Synthetic: true', 'Generated: AI', 'Source: AI', 'AI: true', 'Generated: true'],
        comment: ['ai generated', 'artificially generated', 'synthetic image', 'ml generated', 'neural network', 'diffusion model', 'generated by ai', 'artificial intelligence', 'machine generated'],
        userComment: ['AI Generated', 'Synthetic', 'Machine Learning', 'Generated by AI', 'Artificial Intelligence'],
        parameters: ['prompt:', 'negative prompt:', 'model:', 'guidance scale:', 'inference steps:', 'seed:', 'sampler:', 'cfg scale:', 'steps:', 'width:', 'height:']
      }
    };

    // Video-specific AI generation signatures
    this.videoSignatures = {
      'runway-gen2': {
        metadata: ['Runway Gen-2', 'Gen-2', 'runway generation'],
        comment: ['runway gen-2', 'text to video', 'runway ml']
      },
      'synthesia': {
        metadata: ['Synthesia', 'synthesia.io'],
        comment: ['synthesia', 'ai avatar', 'synthetic video']
      },
      'deepfake': {
        metadata: ['DeepFake', 'FaceSwap', 'DeepFaceLab'],
        comment: ['deepfake', 'face swap', 'synthetic face']
      },

      // C2PA Content Authenticity signatures
      'c2pa': {
        metadata: ['C2PA', 'c2pa', 'http://c2pa.org'],
        exif: ['claim_generator', 'assertions', 'ingredients', 'manifest', 'signature'],
        comment: ['C2PA', 'Content Provenance', 'Content Authenticity'],
        userComment: ['C2PA metadata', 'Content Credentials']
      }
    };

    // Known AI generation file patterns
    this.filePatterns = {
      // Common AI-generated filename patterns
      filenames: [
        /dalle?[-_]?\d+/i,
        /midjourney[-_]?\d+/i,
        /stable[-_]?diffusion/i,
        /ai[-_]?generated/i,
        /synthetic[-_]?image/i,
        /generated[-_]?\d+/i
      ],

      // URL patterns that indicate AI generation
      urls: [
        /cdn\.openai\.com/i,
        /midjourney\.com/i,
        /stability\.ai/i,
        /leonardo\.ai/i,
        /runway\.ml/i,
        /artbreeder\.com/i,
        /deepai\.org/i,
        /firefly\.adobe\.com/i
      ]
    };

    // Magic bytes and file format specific signatures
    this.magicBytes = {
      // PNG signatures with AI metadata
      png: {
        magic: [0x89, 0x50, 0x4E, 0x47],
        chunks: ['tEXt', 'iTXt', 'zTXt'], // Text chunks that may contain AI info
        aiMarkers: ['parameters', 'dream', 'prompt', 'model', 'steps', 'cfg']
      },

      // JPEG signatures with AI EXIF
      jpeg: {
        magic: [0xFF, 0xD8, 0xFF],
        segments: [0xFFE1, 0xFFE2], // APP1, APP2 segments for EXIF/metadata
        exifMarkers: ['Make', 'Model', 'Software', 'Artist', 'UserComment', 'ImageDescription']
      },

      // WebP signatures
      webp: {
        magic: [0x52, 0x49, 0x46, 0x46], // RIFF
        fourcc: [0x57, 0x45, 0x42, 0x50], // WEBP
        chunks: ['EXIF', 'XMP ']
      }
    };
  }

  // Get all signatures for a specific AI tool
  getToolSignatures(tool) {
    return this.aiSignatures[tool] || null;
  }

  // Get all AI signatures as flat arrays for quick searching
  getAllSignatures() {
    const all = {
      metadata: [],
      exif: [],
      comment: [],
      userComment: [],
      parameters: [],
      custom: []
    };

    Object.values(this.aiSignatures).forEach(signatures => {
      Object.keys(all).forEach(key => {
        if (signatures[key]) {
          all[key] = all[key].concat(signatures[key]);
        }
      });
    });

    return all;
  }

  // Check if a string contains any AI signatures
  containsAISignature(text, type = 'all') {
    if (!text) return null;

    const lowerText = text.toLowerCase();

    for (const [tool, signatures] of Object.entries(this.aiSignatures)) {
      const sigTypes = type === 'all' ? Object.keys(signatures) : [type];

      for (const sigType of sigTypes) {
        const sigs = signatures[sigType];
        if (sigs) {
          for (const sig of sigs) {
            // Handle different signature formats (strings, objects, etc.)
            const sigString = typeof sig === 'string' ? sig : 
                             typeof sig === 'object' && sig.value ? sig.value :
                             typeof sig === 'object' && sig.signature ? sig.signature :
                             String(sig);
            
            if (sigString && typeof sigString === 'string' && lowerText.includes(sigString.toLowerCase())) {
              return {
                tool,
                signature: sig,
                type: sigType,
                confidence: this.getConfidenceLevel(sigType, sig)
              };
            }
          }
        }
      }
    }

    return null;
  }

  // Determine confidence level based on signature type and content
  getConfidenceLevel(type, signature) {
    // Higher confidence for specific tool names in metadata
    if (type === 'metadata' || type === 'exif') {
      const specificTools = ['dall-e', 'midjourney', 'stable diffusion', 'adobe firefly', 'nano-banana', 'nano banana', 'google ai', 'ideogram ai', 'leonardo ai'];
      if (specificTools.some(tool => signature.toLowerCase().includes(tool))) {
        return 'high';
      }
    }

    // High confidence for clear tool names in any field
    const clearToolNames = ['adobe firefly', 'ideogram ai', 'dall-e', 'midjourney', 'stable diffusion', 'nano-banana', 'leonardo ai', 'google ai'];
    if (clearToolNames.some(tool => signature.toLowerCase().includes(tool))) {
      return 'high';
    }

    // Medium confidence for parameter patterns
    if (type === 'parameters' || type === 'custom') {
      return 'medium';
    }

    // Lower confidence for generic terms
    if (type === 'comment' && signature.length < 5) {
      return 'low';
    }

    return 'medium';
  }

  // Check filename patterns (enhanced with tool-specific patterns)
  checkFilenamePatterns(filename) {
    if (!filename) return null;

    // Check general filename patterns
    for (const pattern of this.filePatterns.filenames) {
      if (pattern.test(filename)) {
        return {
          pattern: pattern.source,
          confidence: 'medium',
          type: 'filename',
          tool: 'generic-ai'
        };
      }
    }

    // Check tool-specific filename patterns
    for (const [tool, signatures] of Object.entries(this.aiSignatures)) {
      if (signatures.filenamePatterns) {
        for (const pattern of signatures.filenamePatterns) {
          if (pattern.test(filename)) {
            return {
              pattern: pattern.source,
              confidence: 'high',
              type: 'filename',
              tool: tool
            };
          }
        }
      }
    }

    return null;
  }

  // Check URL patterns (enhanced with tool-specific patterns)
  checkUrlPatterns(url) {
    if (!url) return null;

    // Check general URL patterns
    for (const pattern of this.filePatterns.urls) {
      if (pattern.test(url)) {
        return {
          pattern: pattern.source,
          confidence: 'high',
          type: 'url',
          tool: 'generic-ai'
        };
      }
    }

    // Check tool-specific URL patterns
    for (const [tool, signatures] of Object.entries(this.aiSignatures)) {
      if (signatures.urlPatterns) {
        for (const pattern of signatures.urlPatterns) {
          if (pattern.test(url)) {
            return {
              pattern: pattern.source,
              confidence: 'high',
              type: 'url',
              tool: tool
            };
          }
        }
      }
    }

    return null;
  }
}

// Export for use in content script
if (typeof window !== 'undefined') {
  window.SignatureDatabase = SignatureDatabase;
} else if (typeof module !== 'undefined') {
  module.exports = SignatureDatabase;
}